// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/caiiomp/vehicle-resale-api/src/core/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// SaleService is an autogenerated mock type for the SaleService type
type SaleService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *SaleService) Create(ctx context.Context, _a1 entity.Sale) (*entity.Sale, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Sale) (*entity.Sale, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Sale) *entity.Sale); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Sale) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx
func (_m *SaleService) Search(ctx context.Context) ([]entity.Sale, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []entity.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Sale, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Sale); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSaleService creates a new instance of SaleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSaleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SaleService {
	mock := &SaleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
