// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/caiiomp/vehicle-resale-api/src/core/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// VehicleService is an autogenerated mock type for the VehicleService type
type VehicleService struct {
	mock.Mock
}

// Buy provides a mock function with given fields: ctx, vehicleID, userID
func (_m *VehicleService) Buy(ctx context.Context, vehicleID string, userID string) (*entity.Vehicle, error) {
	ret := _m.Called(ctx, vehicleID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Buy")
	}

	var r0 *entity.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Vehicle, error)); ok {
		return rf(ctx, vehicleID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Vehicle); ok {
		r0 = rf(ctx, vehicleID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, vehicleID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, vehicle
func (_m *VehicleService) Create(ctx context.Context, vehicle entity.Vehicle) (*entity.Vehicle, error) {
	ret := _m.Called(ctx, vehicle)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Vehicle) (*entity.Vehicle, error)); ok {
		return rf(ctx, vehicle)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Vehicle) *entity.Vehicle); ok {
		r0 = rf(ctx, vehicle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Vehicle) error); ok {
		r1 = rf(ctx, vehicle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *VehicleService) GetByID(ctx context.Context, id string) (*entity.Vehicle, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entity.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Vehicle, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Vehicle); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, isSold
func (_m *VehicleService) Search(ctx context.Context, isSold *bool) ([]entity.Vehicle, error) {
	ret := _m.Called(ctx, isSold)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []entity.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bool) ([]entity.Vehicle, error)); ok {
		return rf(ctx, isSold)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bool) []entity.Vehicle); ok {
		r0 = rf(ctx, isSold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bool) error); ok {
		r1 = rf(ctx, isSold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, vehicle
func (_m *VehicleService) Update(ctx context.Context, id string, vehicle entity.Vehicle) (*entity.Vehicle, error) {
	ret := _m.Called(ctx, id, vehicle)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entity.Vehicle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Vehicle) (*entity.Vehicle, error)); ok {
		return rf(ctx, id, vehicle)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Vehicle) *entity.Vehicle); ok {
		r0 = rf(ctx, id, vehicle)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Vehicle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Vehicle) error); ok {
		r1 = rf(ctx, id, vehicle)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVehicleService creates a new instance of VehicleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVehicleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *VehicleService {
	mock := &VehicleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
